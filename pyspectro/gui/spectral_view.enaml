# -----------------------------------------------------------------------------
# Copyright (c) 2016-2021, DSPlogic, Inc.  All Rights Reserved.
# 
# RESTRICTED RIGHTS
# Use of this software is permitted only with a software license agreement.
#
# Details of the software license agreement are in the file LICENSE.txt, 
# distributed with this software.
# -----------------------------------------------------------------------------


from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import Container, CheckBox, Label, MPLCanvas

#from pyspectro.gui.mpl_figure import SpectrumFigure

import functools
import numpy as np
from enaml.widgets.combo_box import ComboBox



def update_label(specView, event):

    #: Event indices
    ind = event.ind

    # the click locations
    x = event.mouseevent.xdata
    y = event.mouseevent.ydata

    #: Get data
    thisline = event.artist
    xdata = thisline.get_xdata()
    ydata = thisline.get_ydata()
    points = zip(xdata[ind], ydata[ind])

    #: Find closest point
    distances = np.hypot(x - xdata[ind], y - ydata[ind])
    indmin = distances.argmin()
    dataind = event.ind[indmin]
    closestPoint = (xdata[dataind], ydata[dataind])

    specView.spectrumFigure.ind_selected = dataind
    specView.spectrumFigure.selection_active = True

    #: Update label
    #label = specView.find('picker_label')
    #label.text = "(%s, %s)" % closestPoint 
    
    specView.spectrumFigure.redraw()
                    
                    
enamldef SpectralView(Container):  specView :

    attr spectrumFigure
    
    activated ::
        spectrumFigure.figure.canvas.mpl_connect('pick_event', 
                               functools.partial(update_label, self))

        canvas.toolbar_visible = True
        spectrumFigure.autoscale = False
        

    constraints = [
        vbox(     hbox(chk_tb, autoscale, disableRefresh, units), canvas, picker ),
        align('width', chk_tb, autoscale, disableRefresh, units)
    ]
    
    MPLCanvas: canvas:
        figure << spectrumFigure.figure

    CheckBox: chk_tb:
        text = 'Show Toolbar'
        checked := canvas.toolbar_visible

    ComboBox: units:
        items = ['dB-FS', 'FS', 'dBm'] #, 'mW'
        index  << items.index(spectrumFigure.units)
        selected_item >> spectrumFigure.units
        selected_item ::
            if selected_item == 'dB-FS':
                spectrumFigure.yrange = (-120, 0)
                spectrumFigure.autoscale = False
                spectrumFigure.update_ylabel()
            elif selected_item == 'FS':
                spectrumFigure.yrange = (0, 1)
                spectrumFigure.autoscale = False
                spectrumFigure.update_ylabel()
            elif selected_item == 'dBm':
                spectrumFigure.yrange = (-110, 10)
                spectrumFigure.autoscale = False
                spectrumFigure.update_ylabel()

    CheckBox: disableRefresh :
        text = 'Disable refresh'
        checked := spectrumFigure.disableRefresh

    CheckBox: autoscale:
        text = 'Auto Scale'
        checked := spectrumFigure.autoscale
        toggled ::
            if checked:
                spectrumFigure.ax.autoscale(enable=True, axis='both')
            else:
                spectrumFigure.ax.autoscale(enable=False, axis='both')
    
            
    Label: picker :
        name = 'picker_label'
        #enabled << spectrumFigure.selection_active
        text << 'Selected: {0} MHz, {1:g} {2}'.format(spectrumFigure.val_selected[0], spectrumFigure.val_selected[1], spectrumFigure.units) #if enabled else ''
        